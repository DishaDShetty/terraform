name: Infracost_final

on:
  push:
    branches:    
      - '**'        # matches every branch
  pull_request:
    branches:
      - main
env:
  INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

jobs:
  tfsec-checks:
      runs-on: ubuntu-latest
      steps:
    
# Checkout Repository
      - name : Check out Git Repository
        uses: actions/checkout@v2
      
      - name: Install tfsec
        run: |
          curl -LJO https://github.com/tfsec/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec-linux-amd64
          sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec
      
        
      - name: Run tfsec 
        run: tfsec -m LOW .
  tflint-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v2

      - name: Install Terraform and TFLint
        run: |
          curl -LO "https://releases.hashicorp.com/terraform/1.0.3/terraform_1.0.3_linux_amd64.zip"
          unzip terraform_1.0.3_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version
          curl -LJO "https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip"
          unzip tflint_linux_amd64.zip -d tflint_temp
          sudo mv tflint_temp/tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: |
            chmod +x custom_policy_tflint.sh
            ./custom_policy_tflint.sh

      - name: Run TFLint default
        run: tflint --chdir=.
  owasp_zap_scan:
    runs-on: ubuntu-latest
    name: Scan the web application using OWASP
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://www.youtube.com/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  infracost:
    name: Check Infrastructure Costs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Infracost
        run: |
          curl -fsSL https://github.com/infracost/infracost/releases/latest/download/infracost-linux-amd64.tar.gz | tar xz
          sudo mv infracost-linux-amd64 /usr/local/bin/infracost

      - name: Run Infracost
        run: infracost breakdown --path . 

  synk: 
    # permissions are needed or else writing will fail
      permissions:
            contents: read # for actions/checkout to fetch code
            security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
            actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

      name: Infrastructure Deploy
      runs-on: ubuntu-latest
      env:
        TF_WORKSPACE: main
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


      steps:
        - uses: actions/checkout@v3
        - name: Set up Snyk CLI to check for security issues
          # Snyk can be used to break the build when it detects security issues.
          # In this case we want to upload the SAST issues to GitHub Code Scanning
          uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

          # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
          # Use || true to not fail the pipeline.
        - name: Snyk IaC test and report
          run: snyk iac test --report --sarif-file-output=snyk-code.sarif || true


        - name: check the contents .sarif file
          run: cat snyk-code.sarif 

        - name: Upload sarif file to Github Code Scanning
          if: always()
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: snyk-code.sarif

        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v1

        - name: Terraform Init
          run: terraform init

        - name: Terraform Plan
          run: terraform plan -out=tfplan

        - name: Terraform Apply
          run: terraform apply -auto-approve tfplan
